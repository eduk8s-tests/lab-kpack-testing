apiVersion: training.eduk8s.io/v1alpha2
kind: Workshop
metadata:
  name: lab-kpack-testing
spec:
  vendor: eduk8s.io
  title: Kpack Testing
  description: Play area for testing kpack
  tags:
  - playground
  - containers
  - buildpacks
  url: https://github.com/eduk8s-tests/lab-kpack-testing
  content:
    image: quay.io/eduk8s-tests/lab-kpack-testing:master
    #files: github.com/eduk8s-tests/lab-kpack-testing
  duration: 1h
  session:
    namespaces:
      budget: medium
    applications:
      terminal:
        enabled: true
        layout: split
      console:
        enabled: true
      editor:
        enabled: false
      slides:
        enabled: false
    patches:
      containers:
      - name: workshop
        resources:
          requests:
            memory: 256Mi
          limits:
            memory: 512Mi
        volumeMounts:
        - name: registry
          mountPath: /var/run/registry
      volumes:
      - name: registry
        configMap:
          name: $(session_namespace)-registry
          items:
          - key: config.json
            path: config.json
    objects:
    - apiVersion: rbac.authorization.k8s.io/v1
      kind: Role
      metadata:
        name: kpack-user
      rules:
      - apiGroups:
        - build.pivotal.io
        resources:
        - builds
        - builders
        - images
        - sourceresolvers
        verbs:
        - get
        - list
        - watch
        - create
        - delete
        - patch
        - update
    - apiVersion: rbac.authorization.k8s.io/v1
      kind: RoleBinding
      metadata:
        name: kpack-user
      roleRef:
        apiGroup: rbac.authorization.k8s.io
        kind: Role
        name: kpack-user
      subjects:
      - kind: ServiceAccount
        namespace: $(workshop_namespace)
        name: $(service_account)
    - apiVersion: v1
      kind: PersistentVolumeClaim
      metadata:
        namespace: $(workshop_namespace)
        name: $(session_namespace)-registry
      spec:
        accessModes:
        - ReadWriteOnce
        resources:
          requests:
            storage: 5Gi
    - apiVersion: v1
      kind: ConfigMap
      metadata:
        namespace: $(workshop_namespace)
        name: $(session_namespace)-registry
      data:
        htpasswd: |-
          eduk8s:$2y$05$Oe5Khp7HbllL1oANqmCPSOy1O656z9Z6ETv6GI/DblawxnT/qVUjK
        config.json: |-
          {
            "auths": {
               "$(session_namespace)-registry.$(ingress_domain)": {
                 "auth": "ZWR1azhzOmVkdWs4cw=="
               }
            }
          }
    - apiVersion: apps/v1
      kind: Deployment
      metadata:
        namespace: $(workshop_namespace)
        name: $(session_namespace)-registry
      spec:
        replicas: 1
        selector:
          matchLabels:
            deployment: $(session_namespace)-registry
        strategy:
          type: Recreate
        template:
          metadata:
            labels:
              deployment: $(session_namespace)-registry
          spec:
            containers:
            - name: registry
              image: registry.hub.docker.com/library/registry:2.6.1
              imagePullPolicy: IfNotPresent
              ports:
              - containerPort: 5000
                protocol: TCP
              env:
              - name: REGISTRY_STORAGE_DELETE_ENABLED
                value: "true"
              - name: REGISTRY_AUTH
                value: htpasswd
              - name: REGISTRY_AUTH_HTPASSWD_REALM
                value: Image Registry
              - name: REGISTRY_AUTH_HTPASSWD_PATH
                value: /auth/htpasswd
              volumeMounts:
              - name: data
                mountPath: /var/lib/registry
              - name: auth
                mountPath: /auth
            securityContext:
              runAsUser: 1000
            volumes:
            - name: data
              persistentVolumeClaim:
                claimName: $(session_namespace)-registry
            - name: auth
              configMap:
                name: $(session_namespace)-registry
                items:
                - key: htpasswd
                  path: htpasswd
    - apiVersion: v1
      kind: Service
      metadata:
        namespace: $(workshop_namespace)
        name: $(session_namespace)-registry
      spec:
        type: ClusterIP
        ports:
        - port: 5000
          targetPort: 5000
        selector:
          deployment: $(session_namespace)-registry
    - apiVersion: extensions/v1beta1
      kind: Ingress
      metadata:
        namespace: $(workshop_namespace)
        name: $(session_namespace)-registry
        annotations:
          nginx.ingress.kubernetes.io/proxy-body-size: 512m
      spec:
        rules:
        - host: $(session_namespace)-registry.$(ingress_domain)
          http:
            paths:
            - path: "/"
              backend:
                serviceName: $(session_namespace)-registry
                servicePort: 5000
        tls:
        - hosts:
          - "*.$(ingress_domain)"
          secretName: "$(ingress_secret)"
